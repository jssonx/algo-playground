{"id":190,"fid":190,"name":"Reverse Bits","slug":"reverse-bits","link":"https://leetcode.com/problems/reverse-bits/description/","percent":53.2934331800356,"level":"Easy","category":"algorithms","companies":["airbnb","apple"],"tags":["bit-manipulation"],"totalAC":"603.9K","totalSubmit":"1.1M","likes":4185,"dislikes":1093,"desc":"<p>Reverse bits of a given 32 bits unsigned integer.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer&#39;s internal binary representation is the same, whether it is signed or unsigned.</li>\n\t<li>In Java, the compiler represents the signed integers using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">2&#39;s complement notation</a>. Therefore, in <strong class=\"example\">Example 2</strong> above, the input represents the signed integer <code>-3</code> and the output represents the signed integer <code>-1073741825</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 00000010100101000001111010011100\n<strong>Output:</strong>    964176192 (00111001011110000010100101000000)\n<strong>Explanation: </strong>The input binary string <strong>00000010100101000001111010011100</strong> represents the unsigned integer 43261596, so return 964176192 which its binary representation is <strong>00111001011110000010100101000000</strong>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 11111111111111111111111111111101\n<strong>Output:</strong>   3221225471 (10111111111111111111111111111111)\n<strong>Explanation: </strong>The input binary string <strong>11111111111111111111111111111101</strong> represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is <strong>10111111111111111111111111111111</strong>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The input must be a <strong>binary string</strong> of length <code>32</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If this function is called many times, how would you optimize it?</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\n    // you need treat n as an unsigned value\n    public int reverseBits(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution:\n    # @param n, an integer\n    # @return an integer\n    def reverseBits(self, n):\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def reverseBits(self, n: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"uint32_t reverseBits(uint32_t n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public uint reverseBits(uint n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n - a positive integer\n * @return {number} - a positive integer\n */\nvar reverseBits = function(n) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n, a positive integer\n# @return {Integer}\ndef reverse_bits(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func reverseBits(_ n: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func reverseBits(num uint32) uint32 {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    // you need treat n as an unsigned value\n    def reverseBits(x: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    // you need treat n as an unsigned value\n    fun reverseBits(n:Int):Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn reverse_bits(x: u32) -> u32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function reverseBits($n) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function reverseBits(n: number): number {\n\t\n};"}],"testcase":"00000010100101000001111010011100","testable":true,"templateMeta":{"name":"reverseBits","params":[{"name":"n","type":"string"}],"return":{"type":"integer"},"manual":true}}