{"id":69,"fid":69,"name":"Sqrt(x)","slug":"sqrtx","link":"https://leetcode.com/problems/sqrtx/description/","percent":37.36992266326806,"level":"Easy","category":"algorithms","companies":["apple","bloomberg","facebook"],"tags":["math","binary-search"],"totalAC":"1.4M","totalSubmit":"3.8M","likes":6187,"dislikes":3969,"desc":"<p>Given a non-negative integer <code>x</code>, return <em>the square root of </em><code>x</code><em> rounded down to the nearest integer</em>. The returned integer should be <strong>non-negative</strong> as well.</p>\n\n<p>You <strong>must not use</strong> any built-in exponent function or operator.</p>\n\n<ul>\n\t<li>For example, do not use <code>pow(x, 0.5)</code> in c++ or <code>x ** 0.5</code> in python.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The square root of 4 is 2, so we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 8\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int mySqrt(int x) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int mySqrt(int x) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def mySqrt(self, x: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int mySqrt(int x){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MySqrt(int x) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} x\n# @return {Integer}\ndef my_sqrt(x)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func mySqrt(_ x: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func mySqrt(x int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def mySqrt(x: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun mySqrt(x: Int): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn my_sqrt(x: i32) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function mySqrt($x) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function mySqrt(x: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (my-sqrt x)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec my_sqrt(X :: integer()) -> integer().\nmy_sqrt(X) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec my_sqrt(x :: integer) :: integer\n  def my_sqrt(x) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int mySqrt(int x) {\n\n  }\n}"}],"testcase":"4","testable":true,"templateMeta":{"name":"mySqrt","params":[{"name":"x","type":"integer"}],"return":{"type":"integer"}}}