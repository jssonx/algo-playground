{"id":338,"fid":338,"name":"Counting Bits","slug":"counting-bits","link":"https://leetcode.com/problems/counting-bits/description/","percent":75.56002183824694,"level":"Easy","category":"algorithms","tags":["dynamic-programming","bit-manipulation"],"totalAC":"740.6K","totalSubmit":"978.6K","likes":8506,"dislikes":406,"desc":"<p>Given an integer <code>n</code>, return <em>an array </em><code>ans</code><em> of length </em><code>n + 1</code><em> such that for each </em><code>i</code><em> </em>(<code>0 &lt;= i &lt;= n</code>)<em>, </em><code>ans[i]</code><em> is the <strong>number of </strong></em><code>1</code><em><strong>&#39;s</strong> in the binary representation of </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> [0,1,1]\n<strong>Explanation:</strong>\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> [0,1,1,2,1,2]\n<strong>Explanation:</strong>\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li>\n\t<li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> countBits(int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] countBits(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def countBits(self, n: int) -> List[int]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countBits(int n, int* returnSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] CountBits(int n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number[]}\n */\nvar countBits = function(n) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer[]}\ndef count_bits(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countBits(_ n: Int) -> [Int] {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func countBits(n int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def countBits(n: Int): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun countBits(n: Int): IntArray {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn count_bits(n: i32) -> Vec<i32> {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function countBits($n) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function countBits(n: number): number[] {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (count-bits n)\n  (-> exact-integer? (listof exact-integer?))\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec count_bits(N :: integer()) -> [integer()].\ncount_bits(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec count_bits(n :: integer) :: [integer]\n  def count_bits(n) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> countBits(int n) {\n\n  }\n}"}],"testcase":"2","testable":true,"templateMeta":{"name":"countBits","params":[{"name":"n","type":"integer"}],"return":{"type":"integer[]"}}}