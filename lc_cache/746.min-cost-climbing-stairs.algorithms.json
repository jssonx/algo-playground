{"id":747,"fid":746,"name":"Min Cost Climbing Stairs","slug":"min-cost-climbing-stairs","link":"https://leetcode.com/problems/min-cost-climbing-stairs/description/","percent":62.88481140831285,"level":"Easy","category":"algorithms","tags":["array","dynamic-programming"],"totalAC":"753.3K","totalSubmit":"1.2M","likes":8817,"dislikes":1377,"desc":"<p>You are given an integer array <code>cost</code> where <code>cost[i]</code> is the cost of <code>i<sup>th</sup></code> step on a staircase. Once you pay the cost, you can either climb one or two steps.</p>\n\n<p>You can either start from the step with index <code>0</code>, or the step with index <code>1</code>.</p>\n\n<p>Return <em>the minimum cost to reach the top of the floor</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [10,<u>15</u>,20]\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [<u>1</u>,100,<u>1</u>,1,<u>1</u>,100,<u>1</u>,<u>1</u>,100,<u>1</u>]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= cost.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= cost[i] &lt;= 999</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minCostClimbingStairs(self, cost):\n        \"\"\"\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int minCostClimbingStairs(int* cost, int costSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinCostClimbingStairs(int[] cost) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} cost\n * @return {number}\n */\nvar minCostClimbingStairs = function(cost) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} cost\n# @return {Integer}\ndef min_cost_climbing_stairs(cost)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minCostClimbingStairs(_ cost: [Int]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minCostClimbingStairs(cost []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minCostClimbingStairs(cost: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minCostClimbingStairs(cost: IntArray): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn min_cost_climbing_stairs(cost: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function minCostClimbingStairs($cost) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function minCostClimbingStairs(cost: number[]): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (min-cost-climbing-stairs cost)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec min_cost_climbing_stairs(Cost :: [integer()]) -> integer().\nmin_cost_climbing_stairs(Cost) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec min_cost_climbing_stairs(cost :: [integer]) :: integer\n  def min_cost_climbing_stairs(cost) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minCostClimbingStairs(List<int> cost) {\n\n  }\n}"}],"testcase":"[10,15,20]","testable":true,"templateMeta":{"name":"minCostClimbingStairs","params":[{"name":"cost","type":"integer[]"}],"return":{"type":"integer"}}}