{"id":1019,"fid":977,"name":"Squares of a Sorted Array","slug":"squares-of-a-sorted-array","link":"https://leetcode.com/problems/squares-of-a-sorted-array/description/","percent":71.92185514612453,"level":"Easy","category":"algorithms","tags":["array","two-pointers"],"totalAC":"1.3M","totalSubmit":"1.8M","likes":7269,"dislikes":181,"desc":"<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing</strong> order, return <em>an array of <strong>the squares of each number</strong> sorted in non-decreasing order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-4,-1,0,3,10]\n<strong>Output:</strong> [0,1,9,16,100]\n<strong>Explanation:</strong> After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-7,-3,2,3,11]\n<strong>Output:</strong> [4,9,9,49,121]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code><span>1 &lt;= nums.length &lt;= </span>10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Squaring each element and sorting the new array is very trivial, could you find an <code>O(n)</code> solution using a different approach?","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] sortedSquares(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def sortedSquares(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortedSquares(int* nums, int numsSize, int* returnSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] SortedSquares(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortedSquares = function(nums) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef sorted_squares(nums)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func sortedSquares(_ nums: [Int]) -> [Int] {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func sortedSquares(nums []int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def sortedSquares(nums: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun sortedSquares(nums: IntArray): IntArray {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn sorted_squares(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function sortedSquares($nums) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function sortedSquares(nums: number[]): number[] {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (sorted-squares nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec sorted_squares(Nums :: [integer()]) -> [integer()].\nsorted_squares(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec sorted_squares(nums :: [integer]) :: [integer]\n  def sorted_squares(nums) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> sortedSquares(List<int> nums) {\n\n  }\n}"}],"testcase":"[-4,-1,0,3,10]","testable":true,"templateMeta":{"name":"sortedSquares","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer[]"}}}