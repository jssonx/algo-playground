{"id":256,"fid":256,"name":"Paint House","slug":"paint-house","link":"https://leetcode.com/problems/paint-house/description/","percent":60.91602747146191,"level":"Medium","category":"algorithms","companies":["linkedin"],"tags":["dynamic-programming"],"totalAC":"182.7K","totalSubmit":"299.8K","likes":2113,"dislikes":127,"desc":"<p>There is a row of <code>n</code> houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>\n\n<p>The cost of painting each house with a certain color is represented by an <code>n x 3</code> cost matrix <code>costs</code>.</p>\n\n<ul>\n\t<li>For example, <code>costs[0][0]</code> is the cost of painting house <code>0</code> with the color red; <code>costs[1][2]</code> is the cost of painting house 1 with color green, and so on...</li>\n</ul>\n\n<p>Return <em>the minimum cost to paint all houses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [[17,2,17],[16,16,5],[14,3,19]]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.\nMinimum cost: 2 + 5 + 3 = 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [[7,6,2]]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>costs.length == n</code></li>\n\t<li><code>costs[i].length == 3</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= costs[i][j] &lt;= 20</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minCost(vector<vector<int>>& costs) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minCost(int[][] costs) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minCost(self, costs):\n        \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minCost(self, costs: List[List[int]]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int minCost(int** costs, int costsSize, int* costsColSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinCost(int[][] costs) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} costs\n * @return {number}\n */\nvar minCost = function(costs) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} costs\n# @return {Integer}\ndef min_cost(costs)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minCost(_ costs: [[Int]]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minCost(costs [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minCost(costs: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minCost(costs: Array<IntArray>): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn min_cost(costs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $costs\n     * @return Integer\n     */\n    function minCost($costs) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function minCost(costs: number[][]): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (min-cost costs)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec min_cost(Costs :: [[integer()]]) -> integer().\nmin_cost(Costs) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec min_cost(costs :: [[integer]]) :: integer\n  def min_cost(costs) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minCost(List<List<int>> costs) {\n\n  }\n}"}],"testcase":"[[17,2,17],[16,16,5],[14,3,19]]","testable":true,"templateMeta":{"name":"minCost","params":[{"name":"costs","type":"integer[][]"}],"return":{"type":"integer"}}}