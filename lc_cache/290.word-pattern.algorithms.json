{"id":290,"fid":290,"name":"Word Pattern","slug":"word-pattern","link":"https://leetcode.com/problems/word-pattern/description/","percent":41.66859423732918,"level":"Easy","category":"algorithms","companies":["dropbox","uber"],"tags":["hash-table"],"totalAC":"508.1K","totalSubmit":"1.2M","likes":6011,"dislikes":700,"desc":"<p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>&nbsp;follows the same pattern.</p>\n\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pattern.length &lt;= 300</code></li>\n\t<li><code>pattern</code> contains only lower-case English letters.</li>\n\t<li><code>1 &lt;= s.length &lt;= 3000</code></li>\n\t<li><code>s</code> contains only lowercase English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> <strong>does not contain</strong> any leading or trailing spaces.</li>\n\t<li>All the words in <code>s</code> are separated by a <strong>single space</strong>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean wordPattern(String pattern, String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool wordPattern(char * pattern, char * s){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool WordPattern(string pattern, string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} pattern\n * @param {string} s\n * @return {boolean}\n */\nvar wordPattern = function(pattern, s) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} pattern\n# @param {String} s\n# @return {Boolean}\ndef word_pattern(pattern, s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wordPattern(_ pattern: String, _ s: String) -> Bool {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func wordPattern(pattern string, s string) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def wordPattern(pattern: String, s: String): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun wordPattern(pattern: String, s: String): Boolean {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn word_pattern(pattern: String, s: String) -> bool {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $pattern\n     * @param String $s\n     * @return Boolean\n     */\n    function wordPattern($pattern, $s) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function wordPattern(pattern: string, s: string): boolean {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (word-pattern pattern s)\n  (-> string? string? boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec word_pattern(Pattern :: unicode:unicode_binary(), S :: unicode:unicode_binary()) -> boolean().\nword_pattern(Pattern, S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec word_pattern(pattern :: String.t, s :: String.t) :: boolean\n  def word_pattern(pattern, s) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool wordPattern(String pattern, String s) {\n\n  }\n}"}],"testcase":"\"abba\"\n\"dog cat cat dog\"","testable":true,"templateMeta":{"name":"wordPattern","params":[{"name":"pattern","type":"string"},{"name":"s","type":"string"}],"return":{"type":"boolean"}}}