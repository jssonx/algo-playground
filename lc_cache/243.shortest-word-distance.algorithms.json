{"id":243,"fid":243,"name":"Shortest Word Distance","slug":"shortest-word-distance","link":"https://leetcode.com/problems/shortest-word-distance/description/","percent":64.98640203870644,"level":"Easy","category":"algorithms","companies":["linkedin"],"tags":["array"],"totalAC":"198.8K","totalSubmit":"305.9K","likes":1185,"dislikes":102,"desc":"<p>Given an array of strings <code>wordsDict</code> and two different strings that already exist in the array <code>word1</code> and <code>word2</code>, return <em>the shortest distance between these two words in the list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> wordsDict = [&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;], word1 = &quot;coding&quot;, word2 = &quot;practice&quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> wordsDict = [&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;], word1 = &quot;makes&quot;, word2 = &quot;coding&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= wordsDict.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= wordsDict[i].length &lt;= 10</code></li>\n\t<li><code>wordsDict[i]</code> consists of lowercase English letters.</li>\n\t<li><code>word1</code> and <code>word2</code> are in <code>wordsDict</code>.</li>\n\t<li><code>word1 != word2</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int shortestDistance(vector<string>& wordsDict, string word1, string word2) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int shortestDistance(String[] wordsDict, String word1, String word2) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def shortestDistance(self, wordsDict, word1, word2):\n        \"\"\"\n        :type wordsDict: List[str]\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int shortestDistance(char ** wordsDict, int wordsDictSize, char * word1, char * word2){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int ShortestDistance(string[] wordsDict, string word1, string word2) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} wordsDict\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar shortestDistance = function(wordsDict, word1, word2) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words_dict\n# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef shortest_distance(words_dict, word1, word2)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func shortestDistance(_ wordsDict: [String], _ word1: String, _ word2: String) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func shortestDistance(wordsDict []string, word1 string, word2 string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def shortestDistance(wordsDict: Array[String], word1: String, word2: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun shortestDistance(wordsDict: Array<String>, word1: String, word2: String): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn shortest_distance(words_dict: Vec<String>, word1: String, word2: String) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $wordsDict\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function shortestDistance($wordsDict, $word1, $word2) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function shortestDistance(wordsDict: string[], word1: string, word2: string): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (shortest-distance wordsDict word1 word2)\n  (-> (listof string?) string? string? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec shortest_distance(WordsDict :: [unicode:unicode_binary()], Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nshortest_distance(WordsDict, Word1, Word2) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec shortest_distance(words_dict :: [String.t], word1 :: String.t, word2 :: String.t) :: integer\n  def shortest_distance(words_dict, word1, word2) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int shortestDistance(List<String> wordsDict, String word1, String word2) {\n\n  }\n}"}],"testcase":"[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]\n\"coding\"\n\"practice\"","testable":true,"templateMeta":{"name":"shortestDistance","params":[{"name":"wordsDict","type":"string[]"},{"name":"word1","type":"string"},{"name":"word2","type":"string"}],"return":{"type":"integer"}}}