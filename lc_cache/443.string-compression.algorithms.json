{"id":443,"fid":443,"name":"String Compression","slug":"string-compression","link":"https://leetcode.com/problems/string-compression/description/","percent":52.13693591738577,"level":"Medium","category":"algorithms","companies":["bloomberg","microsoft","snapchat","yelp"],"tags":["string"],"totalAC":"372.8K","totalSubmit":"713.5K","likes":3748,"dislikes":5869,"desc":"<p>Given an array of characters <code>chars</code>, compress it using the following algorithm:</p>\n\n<p>Begin with an empty string <code>s</code>. For each group of <strong>consecutive repeating characters</strong> in <code>chars</code>:</p>\n\n<ul>\n\t<li>If the group&#39;s length is <code>1</code>, append the character to <code>s</code>.</li>\n\t<li>Otherwise, append the character followed by the group&#39;s length.</li>\n</ul>\n\n<p>The compressed string <code>s</code> <strong>should not be returned separately</strong>, but instead, be stored <strong>in the input character array <code>chars</code></strong>. Note that group lengths that are <code>10</code> or longer will be split into multiple characters in <code>chars</code>.</p>\n\n<p>After you are done <strong>modifying the input array,</strong> return <em>the new length of the array</em>.</p>\n\n<p>You must write an algorithm that uses only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n<strong>Output:</strong> Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n<strong>Explanation:</strong> The groups are &quot;aa&quot;, &quot;bb&quot;, and &quot;ccc&quot;. This compresses to &quot;a2b2c3&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;]\n<strong>Output:</strong> Return 1, and the first character of the input array should be: [&quot;a&quot;]\n<strong>Explanation:</strong> The only group is &quot;a&quot;, which remains uncompressed since it&#39;s a single character.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> chars = [&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n<strong>Output:</strong> Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].\n<strong>Explanation:</strong> The groups are &quot;a&quot; and &quot;bbbbbbbbbbbb&quot;. This compresses to &quot;ab12&quot;.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= chars.length &lt;= 2000</code></li>\n\t<li><code>chars[i]</code> is a lowercase English letter, uppercase English letter, digit, or symbol.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int compress(vector<char>& chars) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int compress(char[] chars) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def compress(self, chars):\n        \"\"\"\n        :type chars: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def compress(self, chars: List[str]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int compress(char* chars, int charsSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Compress(char[] chars) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {character[]} chars\n * @return {number}\n */\nvar compress = function(chars) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[]} chars\n# @return {Integer}\ndef compress(chars)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func compress(_ chars: inout [Character]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func compress(chars []byte) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def compress(chars: Array[Char]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun compress(chars: CharArray): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn compress(chars: &mut Vec<char>) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $chars\n     * @return Integer\n     */\n    function compress(&$chars) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function compress(chars: string[]): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (compress chars)\n  (-> (listof char?) exact-integer?)\n\n  )"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int compress(List<String> chars) {\n\n  }\n}"}],"testcase":"[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]","testable":true,"templateMeta":{"name":"compress","params":[{"name":"chars","type":"character[]"}],"return":{"type":"integer"},"output":{"paramindex":0,"size":"ret"}}}