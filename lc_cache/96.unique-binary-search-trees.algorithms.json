{"id":96,"fid":96,"name":"Unique Binary Search Trees","slug":"unique-binary-search-trees","link":"https://leetcode.com/problems/unique-binary-search-trees/description/","percent":59.62383534085194,"level":"Medium","category":"algorithms","companies":["snapchat"],"tags":["dynamic-programming","tree"],"totalAC":"560K","totalSubmit":"939.3K","likes":8901,"dislikes":353,"desc":"<p>Given an integer <code>n</code>, return <em>the number of structurally unique <strong>BST&#39;</strong>s (binary search trees) which has exactly </em><code>n</code><em> nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\" style=\"width: 600px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 5\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 19</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numTrees(int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numTrees(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numTrees(self, n: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int numTrees(int n){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumTrees(int n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number}\n */\nvar numTrees = function(n) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef num_trees(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numTrees(_ n: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numTrees(n int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numTrees(n: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numTrees(n: Int): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn num_trees(n: i32) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numTrees($n) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function numTrees(n: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (num-trees n)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec num_trees(N :: integer()) -> integer().\nnum_trees(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec num_trees(n :: integer) :: integer\n  def num_trees(n) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int numTrees(int n) {\n\n  }\n}"}],"testcase":"3","testable":true,"templateMeta":{"name":"numTrees","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"}}}