{"id":55,"fid":55,"name":"Jump Game","slug":"jump-game","link":"https://leetcode.com/problems/jump-game/description/","percent":38.86961030435719,"level":"Medium","category":"algorithms","companies":["microsoft"],"tags":["array","greedy"],"totalAC":"1.3M","totalSubmit":"3.4M","likes":15341,"dislikes":785,"desc":"<p>You are given an integer array <code>nums</code>. You are initially positioned at the array&#39;s <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.</p>\n\n<p>Return <code>true</code><em> if you can reach the last index, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,1,4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,0,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool canJump(int* nums, int numsSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool CanJump(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canJump(nums []int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun canJump(nums: IntArray): Boolean {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn can_jump(nums: Vec<i32>) -> bool {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function canJump(nums: number[]): boolean {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (can-jump nums)\n  (-> (listof exact-integer?) boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec can_jump(Nums :: [integer()]) -> boolean().\ncan_jump(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec can_jump(nums :: [integer]) :: boolean\n  def can_jump(nums) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool canJump(List<int> nums) {\n\n  }\n}"}],"testcase":"[2,3,1,1,4]","testable":true,"templateMeta":{"name":"canJump","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}