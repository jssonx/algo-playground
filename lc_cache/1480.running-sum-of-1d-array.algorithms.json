{"id":1603,"fid":1480,"name":"Running Sum of 1d Array","slug":"running-sum-of-1d-array","link":"https://leetcode.com/problems/running-sum-of-1d-array/description/","percent":87.69493837898115,"level":"Easy","category":"algorithms","totalAC":"1.4M","totalSubmit":"1.6M","likes":6320,"dislikes":300,"desc":"<p>Given an array <code>nums</code>. We define a running sum of an array as&nbsp;<code>runningSum[i] = sum(nums[0]&hellip;nums[i])</code>.</p>\r\n\r\n<p>Return the running sum of <code>nums</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1,2,3,4]\r\n<strong>Output:</strong> [1,3,6,10]\r\n<strong>Explanation:</strong> Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1,1,1,1,1]\r\n<strong>Output:</strong> [1,2,3,4,5]\r\n<strong>Explanation:</strong> Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [3,1,2,10,1]\r\n<strong>Output:</strong> [3,4,6,16,17]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\r\n\t<li><code>-10^6&nbsp;&lt;= nums[i] &lt;=&nbsp;10^6</code></li>\r\n</ul>","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> runningSum(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] runningSum(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def runningSum(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def runningSum(self, nums: List[int]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* runningSum(int* nums, int numsSize, int* returnSize){\r\n\r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] RunningSum(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar runningSum = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef running_sum(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func runningSum(_ nums: [Int]) -> [Int] {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func runningSum(nums []int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def runningSum(nums: Array[Int]): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun runningSum(nums: IntArray): IntArray {\r\n        \r\n    }\r\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\r\n    pub fn running_sum(nums: Vec<i32>) -> Vec<i32> {\r\n        \r\n    }\r\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\r\n\r\n    /**\r\n     * @param Integer[] $nums\r\n     * @return Integer[]\r\n     */\r\n    function runningSum($nums) {\r\n        \r\n    }\r\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function runningSum(nums: number[]): number[] {\r\n\r\n};"}],"testcase":"[1,2,3,4]","testable":true,"templateMeta":{"name":"runningSum","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer[]"},"manual":false}}