{"id":17,"fid":17,"name":"Letter Combinations of a Phone Number","slug":"letter-combinations-of-a-phone-number","link":"https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/","percent":56.14896463029384,"level":"Medium","category":"algorithms","companies":["amazon","dropbox","facebook","google","uber"],"tags":["string","backtracking"],"totalAC":"1.5M","totalSubmit":"2.6M","likes":13942,"dislikes":808,"desc":"<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\n\n<p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png\" style=\"width: 300px; height: 243px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;23&quot;\n<strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;2&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> letterCombinations(String digits) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** letterCombinations(char * digits, int* returnSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> LetterCombinations(string digits) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function(digits) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} digits\n# @return {String[]}\ndef letter_combinations(digits)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func letterCombinations(_ digits: String) -> [String] {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func letterCombinations(digits string) []string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def letterCombinations(digits: String): List[String] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun letterCombinations(digits: String): List<String> {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn letter_combinations(digits: String) -> Vec<String> {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $digits\n     * @return String[]\n     */\n    function letterCombinations($digits) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function letterCombinations(digits: string): string[] {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (letter-combinations digits)\n  (-> string? (listof string?))\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec letter_combinations(Digits :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nletter_combinations(Digits) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec letter_combinations(digits :: String.t) :: [String.t]\n  def letter_combinations(digits) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<String> letterCombinations(String digits) {\n\n  }\n}"}],"testcase":"\"23\"","testable":true,"templateMeta":{"name":"letterCombinations","params":[{"name":"digits","type":"string"}],"return":{"type":"list<string>"}}}