{"id":1069,"fid":1056,"name":"Confusing Number","slug":"confusing-number","link":"https://leetcode.com/problems/confusing-number/description/","percent":48.241741721220734,"level":"Easy","category":"algorithms","tags":["math"],"totalAC":"35.7K","totalSubmit":"73.9K","likes":258,"dislikes":140,"desc":"<p>A <strong>confusing number</strong> is a number that when rotated <code>180</code> degrees becomes a different number with <strong>each digit valid</strong>.</p>\n\n<p>We can rotate digits of a number by <code>180</code> degrees to form new digits.</p>\n\n<ul>\n\t<li>When <code>0</code>, <code>1</code>, <code>6</code>, <code>8</code>, and <code>9</code> are rotated <code>180</code> degrees, they become <code>0</code>, <code>1</code>, <code>9</code>, <code>8</code>, and <code>6</code> respectively.</li>\n\t<li>When <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, and <code>7</code> are rotated <code>180</code> degrees, they become <strong>invalid</strong>.</li>\n</ul>\n\n<p>Note that after rotating a number, we can ignore leading zeros.</p>\n\n<ul>\n\t<li>For example, after rotating <code>8000</code>, we have <code>0008</code> which is considered as just <code>8</code>.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <code>true</code><em> if it is a <strong>confusing number</strong>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/23/1268_1.png\" style=\"width: 281px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> n = 6\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We get 9 after rotating 6, 9 is a valid number, and 9 != 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/23/1268_2.png\" style=\"width: 312px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> n = 89\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We get 68 after rotating 89, 68 is a valid number and 68 != 89.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/26/1268_3.png\" style=\"width: 301px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> n = 11\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We get 11 after rotating 11, 11 is a valid number but the value remains the same, thus 11 is not a confusing number\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool confusingNumber(int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean confusingNumber(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def confusingNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def confusingNumber(self, n: int) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool confusingNumber(int n){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool ConfusingNumber(int n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {boolean}\n */\nvar confusingNumber = function(n) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Boolean}\ndef confusing_number(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func confusingNumber(_ n: Int) -> Bool {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func confusingNumber(n int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def confusingNumber(n: Int): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun confusingNumber(n: Int): Boolean {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn confusing_number(n: i32) -> bool {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function confusingNumber($n) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function confusingNumber(n: number): boolean {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (confusing-number n)\n  (-> exact-integer? boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec confusing_number(N :: integer()) -> boolean().\nconfusing_number(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec confusing_number(n :: integer) :: boolean\n  def confusing_number(n) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool confusingNumber(int n) {\n\n  }\n}"}],"testcase":"6","testable":true,"templateMeta":{"name":"confusingNumber","params":[{"name":"n","type":"integer"}],"return":{"type":"boolean"}}}