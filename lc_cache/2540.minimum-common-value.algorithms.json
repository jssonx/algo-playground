{"id":2634,"fid":2540,"name":"Minimum Common Value","slug":"minimum-common-value","link":"https://leetcode.com/problems/minimum-common-value/description/","percent":51.621565071837075,"level":"Easy","category":"algorithms","totalAC":"32.1K","totalSubmit":"62.5K","likes":310,"dislikes":4,"desc":"<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in non-decreasing order, return <em>the <strong>minimum integer common</strong> to both arrays</em>. If there is no common integer amongst <code>nums1</code> and <code>nums2</code>, return <code>-1</code>.</p>\n\n<p>Note that an integer is said to be <strong>common</strong> to <code>nums1</code> and <code>nums2</code> if both arrays have <strong>at least one</strong> occurrence of that integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3], nums2 = [2,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The smallest element common to both arrays is 2, so we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,6], nums2 = [2,3,4,5]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n\t<li>Both <code>nums1</code> and <code>nums2</code> are sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int getCommon(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int getCommon(int[] nums1, int[] nums2) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def getCommon(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int getCommon(int* nums1, int nums1Size, int* nums2, int nums2Size){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int GetCommon(int[] nums1, int[] nums2) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar getCommon = function(nums1, nums2) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef get_common(nums1, nums2)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func getCommon(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func getCommon(nums1 []int, nums2 []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def getCommon(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun getCommon(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn get_common(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function getCommon($nums1, $nums2) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function getCommon(nums1: number[], nums2: number[]): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (get-common nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec get_common(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nget_common(Nums1, Nums2) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec get_common(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def get_common(nums1, nums2) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int getCommon(List<int> nums1, List<int> nums2) {\n\n  }\n}"}],"testcase":"[1,2,3]\n[2,4]","testable":true,"templateMeta":{"name":"getCommon","params":[{"name":"nums1","type":"integer[]"},{"type":"integer[]","name":"nums2"}],"return":{"type":"integer"}}}