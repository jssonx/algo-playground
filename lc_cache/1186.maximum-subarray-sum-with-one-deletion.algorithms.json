{"id":1288,"fid":1186,"tags":["dynamic-programming"], "name":"Maximum Subarray Sum with One Deletion","slug":"maximum-subarray-sum-with-one-deletion","link":"https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/description/","percent":41.35782187760109,"level":"Medium","category":"algorithms","totalAC":"38K","totalSubmit":"91.8K","likes":1506,"dislikes":53,"desc":"<p>Given an array of integers, return the maximum sum for a <strong>non-empty</strong>&nbsp;subarray (contiguous elements) with at most one element deletion.&nbsp;In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the&nbsp;sum of the remaining elements is maximum possible.</p>\n\n<p>Note that the subarray needs to be <strong>non-empty</strong> after deleting one element.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,-2,0,3]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,-2,-2,3]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>We just choose [3] and it&#39;s the maximum sum.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [-1,-1,-1,-1]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>&nbsp;The final subarray needs to be non-empty. You can&#39;t choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maximumSum(vector<int>& arr) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maximumSum(int[] arr) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maximumSum(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maximumSum(self, arr: List[int]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int maximumSum(int* arr, int arrSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaximumSum(int[] arr) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} arr\n * @return {number}\n */\nvar maximumSum = function(arr) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} arr\n# @return {Integer}\ndef maximum_sum(arr)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maximumSum(_ arr: [Int]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maximumSum(arr []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maximumSum(arr: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maximumSum(arr: IntArray): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn maximum_sum(arr: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function maximumSum($arr) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function maximumSum(arr: number[]): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (maximum-sum arr)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec maximum_sum(Arr :: [integer()]) -> integer().\nmaximum_sum(Arr) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec maximum_sum(arr :: [integer]) :: integer\n  def maximum_sum(arr) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maximumSum(List<int> arr) {\n\n  }\n}"}],"testcase":"[1,-2,0,3]","testable":true,"templateMeta":{"name":"maximumSum","params":[{"name":"arr","type":"integer[]"}],"return":{"type":"integer"}}}