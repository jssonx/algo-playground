{"id":1345,"fid":1427,"name":"Perform String Shifts","slug":"perform-string-shifts","link":"https://leetcode.com/problems/perform-string-shifts/description/","percent":54.28072002380244,"level":"Easy","category":"algorithms","totalAC":"73.3K","totalSubmit":"135K","likes":187,"dislikes":4,"desc":"<p>You are given a string <code>s</code> containing lowercase English letters, and a matrix <code>shift</code>, where <code>shift[i] = [direction<sub>i</sub>, amount<sub>i</sub>]</code>:</p>\n\n<ul>\n\t<li><code>direction<sub>i</sub></code> can be <code>0</code> (for left shift) or <code>1</code> (for right shift).</li>\n\t<li><code>amount<sub>i</sub></code> is the amount by which string <code>s</code> is to be shifted.</li>\n\t<li>A left shift by 1 means remove the first character of <code>s</code> and append it to the end.</li>\n\t<li>Similarly, a right shift by 1 means remove the last character of <code>s</code> and add it to the beginning.</li>\n</ul>\n\n<p>Return the final string after all operations.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;, shift = [[0,1],[1,2]]\n<strong>Output:</strong> &quot;cab&quot;\n<strong>Explanation:</strong>&nbsp;\n[0,1] means shift to left by 1. &quot;abc&quot; -&gt; &quot;bca&quot;\n[1,2] means shift to right by 2. &quot;bca&quot; -&gt; &quot;cab&quot;</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcdefg&quot;, shift = [[1,1],[1,1],[0,2],[1,3]]\n<strong>Output:</strong> &quot;efgabcd&quot;\n<strong>Explanation:</strong>&nbsp; \n[1,1] means shift to right by 1. &quot;abcdefg&quot; -&gt; &quot;gabcdef&quot;\n[1,1] means shift to right by 1. &quot;gabcdef&quot; -&gt; &quot;fgabcde&quot;\n[0,2] means shift to left by 2. &quot;fgabcde&quot; -&gt; &quot;abcdefg&quot;\n[1,3] means shift to right by 3. &quot;abcdefg&quot; -&gt; &quot;efgabcd&quot;</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> only contains lower case English letters.</li>\n\t<li><code>1 &lt;= shift.length &lt;= 100</code></li>\n\t<li><code>shift[i].length == 2</code></li>\n\t<li><code>direction<sub>i</sub></code><sub> </sub>is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>0 &lt;= amount<sub>i</sub> &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string stringShift(string s, vector<vector<int>>& shift) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String stringShift(String s, int[][] shift) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def stringShift(self, s, shift):\n        \"\"\"\n        :type s: str\n        :type shift: List[List[int]]\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def stringShift(self, s: str, shift: List[List[int]]) -> str:\n        "},{"value":"c","text":"C","defaultCode":"char * stringShift(char * s, int** shift, int shiftSize, int* shiftColSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string StringShift(string s, int[][] shift) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @param {number[][]} shift\n * @return {string}\n */\nvar stringShift = function(s, shift) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {Integer[][]} shift\n# @return {String}\ndef string_shift(s, shift)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func stringShift(_ s: String, _ shift: [[Int]]) -> String {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func stringShift(s string, shift [][]int) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def stringShift(s: String, shift: Array[Array[Int]]): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun stringShift(s: String, shift: Array<IntArray>): String {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn string_shift(s: String, shift: Vec<Vec<i32>>) -> String {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer[][] $shift\n     * @return String\n     */\n    function stringShift($s, $shift) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function stringShift(s: string, shift: number[][]): string {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (string-shift s shift)\n  (-> string? (listof (listof exact-integer?)) string?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec string_shift(S :: unicode:unicode_binary(), Shift :: [[integer()]]) -> unicode:unicode_binary().\nstring_shift(S, Shift) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec string_shift(s :: String.t, shift :: [[integer]]) :: String.t\n  def string_shift(s, shift) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String stringShift(String s, List<List<int>> shift) {\n\n  }\n}"}],"testcase":"\"abc\"\n[[0,1],[1,2]]","testable":true,"templateMeta":{"name":"stringShift","params":[{"name":"s","type":"string"},{"type":"integer[][]","name":"shift"}],"return":{"type":"string"}}}