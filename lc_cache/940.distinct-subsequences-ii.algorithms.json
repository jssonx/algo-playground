{"id":977,"fid":940,"name":"Distinct Subsequences II","slug":"distinct-subsequences-ii","link":"https://leetcode.com/problems/distinct-subsequences-ii/description/","percent":44.11772803612235,"level":"Hard","category":"algorithms","tags":["dynamic-programming"],"totalAC":"32.4K","totalSubmit":"73.7K","likes":1421,"dislikes":32,"desc":"<p>Given a string s, return <em>the number of <strong>distinct non-empty subsequences</strong> of</em> <code>s</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\nA <strong>subsequence</strong> of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;<u>a</u>b<u>c</u>d<u>e</u>&quot;</code> while <code>&quot;aec&quot;</code> is not.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The 7 distinct subsequences are &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;ac&quot;, &quot;bc&quot;, and &quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The 6 distinct subsequences are &quot;a&quot;, &quot;b&quot;, &quot;ab&quot;, &quot;aa&quot;, &quot;ba&quot;, and &quot;aba&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaa&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The 3 distinct subsequences are &quot;a&quot;, &quot;aa&quot; and &quot;aaa&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int distinctSubseqII(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int distinctSubseqII(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def distinctSubseqII(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def distinctSubseqII(self, s: str) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int distinctSubseqII(char * s){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int DistinctSubseqII(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {number}\n */\nvar distinctSubseqII = function(s) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer}\ndef distinct_subseq_ii(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func distinctSubseqII(_ s: String) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func distinctSubseqII(s string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def distinctSubseqII(s: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun distinctSubseqII(s: String): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn distinct_subseq_ii(s: String) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function distinctSubseqII($s) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function distinctSubseqII(s: string): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (distinct-subseq-ii s)\n  (-> string? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec distinct_subseq_ii(S :: unicode:unicode_binary()) -> integer().\ndistinct_subseq_ii(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec distinct_subseq_ii(s :: String.t) :: integer\n  def distinct_subseq_ii(s) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int distinctSubseqII(String s) {\n\n  }\n}"}],"testcase":"\"abc\"","testable":true,"templateMeta":{"name":"distinctSubseqII","params":[{"name":"s","type":"string"}],"return":{"type":"integer"}}}