{"id":227,"fid":227,"name":"Basic Calculator II","slug":"basic-calculator-ii","link":"https://leetcode.com/problems/basic-calculator-ii/description/","percent":42.3434949486037,"level":"Medium","category":"algorithms","companies":["airbnb"],"tags":["string"],"totalAC":"500.2K","totalSubmit":"1.2M","likes":5277,"dislikes":681,"desc":"<p>Given a string <code>s</code> which represents an expression, <em>evaluate this expression and return its value</em>.&nbsp;</p>\n\n<p>The integer division should truncate toward zero.</p>\n\n<p>You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>.</p>\n\n<p><strong>Note:</strong> You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"3+2*2\"\n<strong>Output:</strong> 7\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \" 3/2 \"\n<strong>Output:</strong> 1\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \" 3+5 / 2 \"\n<strong>Output:</strong> 5\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of integers and operators <code>(&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;)</code> separated by some number of spaces.</li>\n\t<li><code>s</code> represents <strong>a valid expression</strong>.</li>\n\t<li>All the integers in the expression are non-negative integers in the range <code>[0, 2<sup>31</sup> - 1]</code>.</li>\n\t<li>The answer is <strong>guaranteed</strong> to fit in a <strong>32-bit integer</strong>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int calculate(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int calculate(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def calculate(self, s: str) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int calculate(char * s){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Calculate(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {number}\n */\nvar calculate = function(s) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer}\ndef calculate(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func calculate(_ s: String) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func calculate(s string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def calculate(s: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun calculate(s: String): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn calculate(s: String) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function calculate($s) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function calculate(s: string): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (calculate s)\n  (-> string? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec calculate(S :: unicode:unicode_binary()) -> integer().\ncalculate(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec calculate(s :: String.t) :: integer\n  def calculate(s) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int calculate(String s) {\n\n  }\n}"}],"testcase":"\"3+2*2\"","testable":true,"templateMeta":{"name":"calculate","params":[{"name":"s","type":"string"}],"return":{"type":"integer"}}}