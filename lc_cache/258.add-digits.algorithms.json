{"id":258,"fid":258,"name":"Add Digits","slug":"add-digits","link":"https://leetcode.com/problems/add-digits/description/","percent":63.748353588199656,"level":"Easy","category":"algorithms","companies":["adobe","microsoft"],"tags":["math"],"totalAC":"548.4K","totalSubmit":"858.5K","likes":3201,"dislikes":1752,"desc":"<p>Given an integer <code>num</code>, repeatedly add all its digits until the result has only one digit, and return it.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 38\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The process is\n38 --&gt; 3 + 8 --&gt; 11\n11 --&gt; 1 + 1 --&gt; 2 \nSince 2 has only one digit, return it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do it without any loop/recursion in <code>O(1)</code> runtime?</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int addDigits(int num) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int addDigits(int num) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def addDigits(self, num: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int addDigits(int num){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int AddDigits(int num) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\n# @return {Integer}\ndef add_digits(num)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func addDigits(_ num: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func addDigits(num int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def addDigits(num: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun addDigits(num: Int): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn add_digits(num: i32) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function addDigits($num) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function addDigits(num: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (add-digits num)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec add_digits(Num :: integer()) -> integer().\nadd_digits(Num) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec add_digits(num :: integer) :: integer\n  def add_digits(num) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int addDigits(int num) {\n\n  }\n}"}],"testcase":"38","testable":true,"templateMeta":{"name":"addDigits","params":[{"name":"num","type":"integer"}],"return":{"type":"integer"}}}