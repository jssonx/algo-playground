{"id":1224,"fid":1289,"tags":["dynamic-programming"],"name":"Minimum Falling Path Sum II","slug":"minimum-falling-path-sum-ii","link":"https://leetcode.com/problems/minimum-falling-path-sum-ii/description/","percent":58.66295264623955,"level":"Hard","category":"algorithms","totalAC":"39.2K","totalSubmit":"66.9K","likes":1309,"dislikes":76,"desc":"<p>Given an <code>n x n</code> integer matrix <code>grid</code>, return <em>the minimum sum of a <strong>falling path with non-zero shifts</strong></em>.</p>\n\n<p>A <strong>falling path with non-zero shifts</strong> is a choice of exactly one element from each row of <code>grid</code> such that no two elements chosen in adjacent rows are in the same column.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/10/falling-grid.jpg\" style=\"width: 244px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> arr = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is&nbsp;[1,5,7], so the answer is&nbsp;13.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[7]]\n<strong>Output:</strong> 7\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>-99 &lt;= grid[i][j] &lt;= 99</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minFallingPathSum(int[][] grid) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minFallingPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minFallingPathSum(self, grid: List[List[int]]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int minFallingPathSum(int** grid, int gridSize, int* gridColSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinFallingPathSum(int[][] grid) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minFallingPathSum = function(grid) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer}\ndef min_falling_path_sum(grid)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minFallingPathSum(_ grid: [[Int]]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minFallingPathSum(grid [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minFallingPathSum(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minFallingPathSum(grid: Array<IntArray>): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn min_falling_path_sum(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minFallingPathSum($grid) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function minFallingPathSum(grid: number[][]): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (min-falling-path-sum grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec min_falling_path_sum(Grid :: [[integer()]]) -> integer().\nmin_falling_path_sum(Grid) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec min_falling_path_sum(grid :: [[integer]]) :: integer\n  def min_falling_path_sum(grid) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minFallingPathSum(List<List<int>> grid) {\n\n  }\n}"}],"testcase":"[[1,2,3],[4,5,6],[7,8,9]]","testable":true,"templateMeta":{"name":"minFallingPathSum","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}