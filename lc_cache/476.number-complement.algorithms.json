{"id":476,"fid":476,"name":"Number Complement","slug":"number-complement","link":"https://leetcode.com/problems/number-complement/description/","percent":67.29475477952333,"level":"Easy","category":"algorithms","tags":["bit-manipulation"],"totalAC":"291.3K","totalSubmit":"432.7K","likes":2349,"dislikes":114,"desc":"<p>The <strong>complement</strong> of an integer is the integer you get when you flip all the <code>0</code>&#39;s to <code>1</code>&#39;s and all the <code>1</code>&#39;s to <code>0</code>&#39;s in its binary representation.</p>\n\n<ul>\n\t<li>For example, The integer <code>5</code> is <code>&quot;101&quot;</code> in binary and its <strong>complement</strong> is <code>&quot;010&quot;</code> which is the integer <code>2</code>.</li>\n</ul>\n\n<p>Given an integer <code>num</code>, return <em>its complement</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt; 2<sup>31</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 1009: <a href=\"https://leetcode.com/problems/complement-of-base-10-integer/\" target=\"_blank\">https://leetcode.com/problems/complement-of-base-10-integer/</a></p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findComplement(int num) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findComplement(int num) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findComplement(self, num: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int findComplement(int num){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindComplement(int num) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} num\n * @return {number}\n */\nvar findComplement = function(num) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\n# @return {Integer}\ndef find_complement(num)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findComplement(_ num: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findComplement(num int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findComplement(num: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findComplement(num: Int): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_complement(num: i32) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function findComplement($num) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function findComplement(num: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-complement num)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_complement(Num :: integer()) -> integer().\nfind_complement(Num) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_complement(num :: integer) :: integer\n  def find_complement(num) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int findComplement(int num) {\n\n  }\n}"}],"testcase":"5","testable":true,"templateMeta":{"name":"findComplement","params":[{"name":"num","type":"integer"}],"return":{"type":"integer"},"manual":false}}