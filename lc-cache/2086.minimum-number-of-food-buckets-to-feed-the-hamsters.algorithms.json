{"id":2191,"fid":2086,"name":"Minimum Number of Food Buckets to Feed the Hamsters","slug":"minimum-number-of-food-buckets-to-feed-the-hamsters","link":"https://leetcode.com/problems/minimum-number-of-food-buckets-to-feed-the-hamsters/description/","percent":45.112856063343955,"level":"Medium","category":"algorithms","totalAC":"14.1K","totalSubmit":"31.2K","likes":435,"dislikes":20,"desc":"<p>You are given a <strong>0-indexed</strong> string <code>hamsters</code> where <code>hamsters[i]</code> is either:</p>\n\n<ul>\n\t<li><code>&#39;H&#39;</code> indicating that there is a hamster at index <code>i</code>, or</li>\n\t<li><code>&#39;.&#39;</code> indicating that index <code>i</code> is empty.</li>\n</ul>\n\n<p>You will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed if there is at least one food bucket to its left or to its right. More formally, a hamster at index <code>i</code> can be fed if you place a food bucket at index <code>i - 1</code> <strong>and/or</strong> at index <code>i + 1</code>.</p>\n\n<p>Return <em>the minimum number of food buckets you should <strong>place at empty indices</strong> to feed all the hamsters or </em><code>-1</code><em> if it is impossible to feed all of them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/01/example1.png\" style=\"width: 482px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> hamsters = &quot;H..H&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We place two food buckets at indices 1 and 2.\nIt can be shown that if we place only one food bucket, one of the hamsters will not be fed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/01/example2.png\" style=\"width: 602px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> hamsters = &quot;.H.H.&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We place one food bucket at index 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/01/example3.png\" style=\"width: 602px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> hamsters = &quot;.HHH.&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> If we place a food bucket at every empty index as shown, the hamster at index 2 will not be able to eat.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= hamsters.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>hamsters[i]</code> is either<code>&#39;H&#39;</code> or <code>&#39;.&#39;</code>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minimumBuckets(string hamsters) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minimumBuckets(String hamsters) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minimumBuckets(self, hamsters):\n        \"\"\"\n        :type hamsters: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minimumBuckets(self, hamsters: str) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int minimumBuckets(char * hamsters){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinimumBuckets(string hamsters) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} hamsters\n * @return {number}\n */\nvar minimumBuckets = function(hamsters) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} hamsters\n# @return {Integer}\ndef minimum_buckets(hamsters)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minimumBuckets(_ hamsters: String) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minimumBuckets(hamsters string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minimumBuckets(hamsters: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minimumBuckets(hamsters: String): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn minimum_buckets(hamsters: String) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $hamsters\n     * @return Integer\n     */\n    function minimumBuckets($hamsters) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function minimumBuckets(hamsters: string): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (minimum-buckets hamsters)\n  (-> string? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec minimum_buckets(Hamsters :: unicode:unicode_binary()) -> integer().\nminimum_buckets(Hamsters) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec minimum_buckets(hamsters :: String.t) :: integer\n  def minimum_buckets(hamsters) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minimumBuckets(String hamsters) {\n\n  }\n}"}],"testcase":"\"H..H\"","testable":true,"templateMeta":{"name":"minimumBuckets","params":[{"name":"hamsters","type":"string"}],"return":{"type":"integer"}}}