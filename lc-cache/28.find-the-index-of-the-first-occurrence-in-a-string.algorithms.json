{"id":28,"fid":28,"name":"Find the Index of the First Occurrence in a String","slug":"find-the-index-of-the-first-occurrence-in-a-string","link":"https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/description/","percent":37.953480551871195,"level":"Medium","category":"algorithms","companies":["apple","facebook","microsoft","pocketgems"],"tags":["two-pointers","string"],"totalAC":"1.5M","totalSubmit":"4M","likes":1423,"dislikes":102,"desc":"<p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> &quot;sad&quot; occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> &quot;leeto&quot; did not occur in &quot;leetcode&quot;, so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= haystack.length, needle.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int strStr(String haystack, String needle) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int strStr(char * haystack, char * needle){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int StrStr(string haystack, string needle) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func strStr(haystack string, needle string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function strStr(haystack: string, needle: string): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (str-str haystack needle)\n  (-> string? string? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\nstr_str(Haystack, Needle) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int strStr(String haystack, String needle) {\n\n  }\n}"}],"testcase":"\"sadbutsad\"\n\"sad\"","testable":true,"templateMeta":{"name":"strStr","params":[{"name":"haystack","type":"string"},{"name":"needle","type":"string"}],"return":{"type":"integer"}}}