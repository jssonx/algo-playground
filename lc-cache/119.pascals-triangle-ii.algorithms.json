{"id":119,"fid":119,"name":"Pascal's Triangle II","slug":"pascals-triangle-ii","link":"https://leetcode.com/problems/pascals-triangle-ii/description/","percent":60.31446878529038,"level":"Easy","category":"algorithms","companies":["amazon"],"tags":["array"],"totalAC":"653.4K","totalSubmit":"1.1M","likes":3599,"dislikes":294,"desc":"<p>Given an integer <code>rowIndex</code>, return the <code>rowIndex<sup>th</sup></code> (<strong>0-indexed</strong>) row of the <strong>Pascal&#39;s triangle</strong>.</p>\n\n<p>In <strong>Pascal&#39;s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>\n<img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 3\n<strong>Output:</strong> [1,3,3,1]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 0\n<strong>Output:</strong> [1]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> rowIndex = 1\n<strong>Output:</strong> [1,1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= rowIndex &lt;= 33</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you optimize your algorithm to use only <code>O(rowIndex)</code> extra space?</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> getRow(int rowIndex) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<Integer> getRow(int rowIndex) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getRow(int rowIndex, int* returnSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<int> GetRow(int rowIndex) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} row_index\n# @return {Integer[]}\ndef get_row(row_index)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func getRow(_ rowIndex: Int) -> [Int] {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func getRow(rowIndex int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def getRow(rowIndex: Int): List[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun getRow(rowIndex: Int): List<Int> {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn get_row(row_index: i32) -> Vec<i32> {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $rowIndex\n     * @return Integer[]\n     */\n    function getRow($rowIndex) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function getRow(rowIndex: number): number[] {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (get-row rowIndex)\n  (-> exact-integer? (listof exact-integer?))\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec get_row(RowIndex :: integer()) -> [integer()].\nget_row(RowIndex) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec get_row(row_index :: integer) :: [integer]\n  def get_row(row_index) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> getRow(int rowIndex) {\n\n  }\n}"}],"testcase":"3","testable":true,"templateMeta":{"name":"getRow","params":[{"name":"rowIndex","type":"integer"}],"return":{"type":"list<integer>"}}}