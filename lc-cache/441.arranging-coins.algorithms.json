{"id":441,"fid":441,"name":"Arranging Coins","slug":"arranging-coins","link":"https://leetcode.com/problems/arranging-coins/description/","percent":46.223605684713824,"level":"Easy","category":"algorithms","tags":["math","binary-search"],"totalAC":"350.7K","totalSubmit":"758.8K","likes":3192,"dislikes":1199,"desc":"<p>You have <code>n</code> coins and you want to build a staircase with these coins. The staircase consists of <code>k</code> rows where the <code>i<sup>th</sup></code> row has exactly <code>i</code> coins. The last row of the staircase <strong>may be</strong> incomplete.</p>\n\n<p>Given the integer <code>n</code>, return <em>the number of <strong>complete rows</strong> of the staircase you will build</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Because the 3<sup>rd</sup> row is incomplete, we return 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> n = 8\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Because the 4<sup>th</sup> row is incomplete, we return 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int arrangeCoins(int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int arrangeCoins(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def arrangeCoins(self, n: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int arrangeCoins(int n){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int ArrangeCoins(int n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number}\n */\nvar arrangeCoins = function(n) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef arrange_coins(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func arrangeCoins(_ n: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func arrangeCoins(n int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def arrangeCoins(n: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun arrangeCoins(n: Int): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn arrange_coins(n: i32) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function arrangeCoins($n) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function arrangeCoins(n: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (arrange-coins n)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec arrange_coins(N :: integer()) -> integer().\narrange_coins(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec arrange_coins(n :: integer) :: integer\n  def arrange_coins(n) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int arrangeCoins(int n) {\n\n  }\n}"}],"testcase":"5","testable":true,"templateMeta":{"name":"arrangeCoins","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"}}}