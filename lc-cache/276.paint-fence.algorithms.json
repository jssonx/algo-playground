{"id":276,"fid":276,"name":"Paint Fence","slug":"paint-fence","link":"https://leetcode.com/problems/paint-fence/description/","percent":44.369939095731155,"level":"Medium","category":"algorithms","companies":["google"],"tags":["dynamic-programming"],"totalAC":"96.2K","totalSubmit":"216.7K","likes":1402,"dislikes":371,"desc":"<p>You are painting a fence of <code>n</code> posts with <code>k</code> different colors. You must paint the posts following these rules:</p>\n\n<ul>\n\t<li>Every post must be painted <strong>exactly one</strong> color.</li>\n\t<li>There <strong>cannot</strong> be three or more <strong>consecutive</strong> posts with the same color.</li>\n</ul>\n\n<p>Given the two integers <code>n</code> and <code>k</code>, return <em>the <strong>number of ways</strong> you can paint the fence</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/28/paintfenceex1.png\" style=\"width: 507px; height: 313px;\" />\n<pre>\n<strong>Input:</strong> n = 3, k = 2\n<strong>Output:</strong> 6\n<strong>Explanation: </strong>All the possibilities are shown.\nNote that painting all the posts red or all the posts green is invalid because there cannot be three posts in a row with the same color.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, k = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7, k = 2\n<strong>Output:</strong> 42\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li>The testcases are generated such that the answer is in the range <code>[0, 2<sup>31</sup> - 1]</code> for the given <code>n</code> and <code>k</code>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numWays(int n, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numWays(int n, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numWays(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numWays(self, n: int, k: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int numWays(int n, int k){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumWays(int n, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar numWays = function(n, k) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef num_ways(n, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numWays(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numWays(n int, k int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numWays(n: Int, k: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numWays(n: Int, k: Int): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn num_ways(n: i32, k: i32) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function numWays($n, $k) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function numWays(n: number, k: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (num-ways n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec num_ways(N :: integer(), K :: integer()) -> integer().\nnum_ways(N, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec num_ways(n :: integer, k :: integer) :: integer\n  def num_ways(n, k) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int numWays(int n, int k) {\n\n  }\n}"}],"testcase":"3\n2","testable":true,"templateMeta":{"name":"numWays","params":[{"name":"n","type":"integer"},{"name":"k","type":"integer"}],"return":{"type":"integer"}}}