{"id":551,"fid":551,"name":"Student Attendance Record I","slug":"student-attendance-record-i","link":"https://leetcode.com/problems/student-attendance-record-i/description/","percent":48.18059299191375,"level":"Easy","category":"algorithms","companies":["google"],"tags":["string"],"totalAC":"175.2K","totalSubmit":"363.6K","likes":547,"dislikes":30,"desc":"<p>You are given a string <code>s</code> representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p>\n\n<ul>\n\t<li><code>&#39;A&#39;</code>: Absent.</li>\n\t<li><code>&#39;L&#39;</code>: Late.</li>\n\t<li><code>&#39;P&#39;</code>: Present.</li>\n</ul>\n\n<p>The student is eligible for an attendance award if they meet <strong>both</strong> of the following criteria:</p>\n\n<ul>\n\t<li>The student was absent (<code>&#39;A&#39;</code>) for <strong>strictly</strong> fewer than 2 days <strong>total</strong>.</li>\n\t<li>The student was <strong>never</strong> late (<code>&#39;L&#39;</code>) for 3 or more <strong>consecutive</strong> days.</li>\n</ul>\n\n<p>Return <code>true</code><em> if the student is eligible for an attendance award, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PPALLP&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The student has fewer than 2 absences and was never late 3 or more consecutive days.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PPALLL&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;A&#39;</code>, <code>&#39;L&#39;</code>, or <code>&#39;P&#39;</code>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool checkRecord(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean checkRecord(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def checkRecord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def checkRecord(self, s: str) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool checkRecord(char * s){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool CheckRecord(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkRecord = function(s) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Boolean}\ndef check_record(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func checkRecord(_ s: String) -> Bool {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func checkRecord(s string) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def checkRecord(s: String): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun checkRecord(s: String): Boolean {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn check_record(s: String) -> bool {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function checkRecord($s) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function checkRecord(s: string): boolean {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (check-record s)\n  (-> string? boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec check_record(S :: unicode:unicode_binary()) -> boolean().\ncheck_record(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec check_record(s :: String.t) :: boolean\n  def check_record(s) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool checkRecord(String s) {\n\n  }\n}"}],"testcase":"\"PPALLP\"","testable":true,"templateMeta":{"name":"checkRecord","params":[{"name":"s","type":"string"}],"return":{"type":"boolean"}}}