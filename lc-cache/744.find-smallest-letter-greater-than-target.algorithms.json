{"id":745,"fid":744,"name":"Find Smallest Letter Greater Than Target","slug":"find-smallest-letter-greater-than-target","link":"https://leetcode.com/problems/find-smallest-letter-greater-than-target/description/","percent":45.64855969870729,"level":"Easy","category":"algorithms","tags":["binary-search"],"totalAC":"288.2K","totalSubmit":"628.9K","likes":2781,"dislikes":1985,"desc":"<p>You are given an array of characters <code>letters</code> that is sorted in <strong>non-decreasing order</strong>, and a character <code>target</code>. There are <strong>at least two different</strong> characters in <code>letters</code>.</p>\n\n<p>Return <em>the smallest character in </em><code>letters</code><em> that is lexicographically greater than </em><code>target</code>. If such a character does not exist, return the first character in <code>letters</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> letters = [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target = &quot;a&quot;\n<strong>Output:</strong> &quot;c&quot;\n<strong>Explanation:</strong> The smallest character that is lexicographically greater than &#39;a&#39; in letters is &#39;c&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> letters = [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target = &quot;c&quot;\n<strong>Output:</strong> &quot;f&quot;\n<strong>Explanation:</strong> The smallest character that is lexicographically greater than &#39;c&#39; in letters is &#39;f&#39;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> letters = [&quot;x&quot;,&quot;x&quot;,&quot;y&quot;,&quot;y&quot;], target = &quot;z&quot;\n<strong>Output:</strong> &quot;x&quot;\n<strong>Explanation:</strong> There are no characters in letters that is lexicographically greater than &#39;z&#39; so we return letters[0].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= letters.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>letters[i]</code> is a lowercase English letter.</li>\n\t<li><code>letters</code> is sorted in <strong>non-decreasing</strong> order.</li>\n\t<li><code>letters</code> contains at least two different characters.</li>\n\t<li><code>target</code> is a lowercase English letter.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    char nextGreatestLetter(vector<char>& letters, char target) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public char nextGreatestLetter(char[] letters, char target) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def nextGreatestLetter(self, letters, target):\n        \"\"\"\n        :type letters: List[str]\n        :type target: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def nextGreatestLetter(self, letters: List[str], target: str) -> str:\n        "},{"value":"c","text":"C","defaultCode":"char nextGreatestLetter(char* letters, int lettersSize, char target){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public char NextGreatestLetter(char[] letters, char target) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {character[]} letters\n * @param {character} target\n * @return {character}\n */\nvar nextGreatestLetter = function(letters, target) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[]} letters\n# @param {Character} target\n# @return {Character}\ndef next_greatest_letter(letters, target)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func nextGreatestLetter(_ letters: [Character], _ target: Character) -> Character {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func nextGreatestLetter(letters []byte, target byte) byte {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def nextGreatestLetter(letters: Array[Char], target: Char): Char = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun nextGreatestLetter(letters: CharArray, target: Char): Char {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn next_greatest_letter(letters: Vec<char>, target: char) -> char {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $letters\n     * @param String $target\n     * @return String\n     */\n    function nextGreatestLetter($letters, $target) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function nextGreatestLetter(letters: string[], target: string): string {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (next-greatest-letter letters target)\n  (-> (listof char?) char? char?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec next_greatest_letter(Letters :: [char()], Target :: char()) -> char().\nnext_greatest_letter(Letters, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec next_greatest_letter(letters :: [char], target :: char) :: char\n  def next_greatest_letter(letters, target) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String nextGreatestLetter(List<String> letters, String target) {\n\n  }\n}"}],"testcase":"[\"c\",\"f\",\"j\"]\n\"a\"","testable":true,"templateMeta":{"name":"nextGreatestLetter","params":[{"name":"letters","type":"character[]"},{"name":"target","type":"character"}],"return":{"type":"character"}}}