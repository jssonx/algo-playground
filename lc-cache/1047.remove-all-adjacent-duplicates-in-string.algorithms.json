{"id":1128,"fid":1047,"name":"Remove All Adjacent Duplicates In String","slug":"remove-all-adjacent-duplicates-in-string","link":"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/description/","percent":69.94514772148231,"level":"Easy","category":"algorithms","tags":["stack"],"totalAC":"420.1K","totalSubmit":"600.6K","likes":5363,"dislikes":211,"desc":"<p>You are given a string <code>s</code> consisting of lowercase English letters. A <strong>duplicate removal</strong> consists of choosing two <strong>adjacent</strong> and <strong>equal</strong> letters and removing them.</p>\n\n<p>We repeatedly make <strong>duplicate removals</strong> on <code>s</code> until we no longer can.</p>\n\n<p>Return <em>the final string after all such duplicate removals have been made</em>. It can be proven that the answer is <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abbaca&quot;\n<strong>Output:</strong> &quot;ca&quot;\n<strong>Explanation:</strong> \nFor example, in &quot;abbaca&quot; we could remove &quot;bb&quot; since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is &quot;aaca&quot;, of which only &quot;aa&quot; is possible, so the final string is &quot;ca&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;azxxzy&quot;\n<strong>Output:</strong> &quot;ay&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string removeDuplicates(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String removeDuplicates(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def removeDuplicates(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def removeDuplicates(self, s: str) -> str:\n        "},{"value":"c","text":"C","defaultCode":"char * removeDuplicates(char * s){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string RemoveDuplicates(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicates = function(s) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String}\ndef remove_duplicates(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func removeDuplicates(_ s: String) -> String {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func removeDuplicates(s string) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def removeDuplicates(s: String): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun removeDuplicates(s: String): String {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn remove_duplicates(s: String) -> String {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function removeDuplicates($s) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function removeDuplicates(s: string): string {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (remove-duplicates s)\n  (-> string? string?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec remove_duplicates(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nremove_duplicates(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec remove_duplicates(s :: String.t) :: String.t\n  def remove_duplicates(s) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String removeDuplicates(String s) {\n\n  }\n}"}],"testcase":"\"abbaca\"","testable":true,"templateMeta":{"name":"removeDuplicates","params":[{"name":"s","type":"string"}],"return":{"type":"string"}}}