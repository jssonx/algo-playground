{"id":1075,"fid":1065,"name":"Index Pairs of a String","slug":"index-pairs-of-a-string","link":"https://leetcode.com/problems/index-pairs-of-a-string/description/","percent":63.48144210625058,"level":"Easy","category":"algorithms","tags":["string","trie"],"totalAC":"20.7K","totalSubmit":"32.4K","likes":270,"dislikes":87,"desc":"<p>Given a string <code>text</code> and an array of strings <code>words</code>, return <em>an array of all index pairs </em><code>[i, j]</code><em> so that the substring </em><code>text[i...j]</code><em> is in <code>words</code></em>.</p>\n\n<p>Return the pairs <code>[i, j]</code> in sorted order (i.e., sort them by their first coordinate, and in case of ties sort them by their second coordinate).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;thestoryofleetcodeandme&quot;, words = [&quot;story&quot;,&quot;fleet&quot;,&quot;leetcode&quot;]\n<strong>Output:</strong> [[3,7],[9,13],[10,17]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> text = &quot;ababa&quot;, words = [&quot;aba&quot;,&quot;ab&quot;]\n<strong>Output:</strong> [[0,1],[0,2],[2,3],[2,4]]\n<strong>Explanation:</strong> Notice that matches can overlap, see &quot;aba&quot; is found in [0,2] and [2,4].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 50</code></li>\n\t<li><code>text</code> and <code>words[i]</code> consist of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are <strong>unique</strong>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> indexPairs(string text, vector<string>& words) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[][] indexPairs(String text, String[] words) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def indexPairs(self, text, words):\n        \"\"\"\n        :type text: str\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def indexPairs(self, text: str, words: List[str]) -> List[List[int]]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** indexPairs(char * text, char ** words, int wordsSize, int* returnSize, int** returnColumnSizes){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[][] IndexPairs(string text, string[] words) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} text\n * @param {string[]} words\n * @return {number[][]}\n */\nvar indexPairs = function(text, words) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} text\n# @param {String[]} words\n# @return {Integer[][]}\ndef index_pairs(text, words)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func indexPairs(_ text: String, _ words: [String]) -> [[Int]] {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func indexPairs(text string, words []string) [][]int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def indexPairs(text: String, words: Array[String]): Array[Array[Int]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun indexPairs(text: String, words: Array<String>): Array<IntArray> {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn index_pairs(text: String, words: Vec<String>) -> Vec<Vec<i32>> {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $text\n     * @param String[] $words\n     * @return Integer[][]\n     */\n    function indexPairs($text, $words) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function indexPairs(text: string, words: string[]): number[][] {\n\n};"},{"value":"erlang","text":"Erlang","defaultCode":"-spec index_pairs(Text :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> [[integer()]].\nindex_pairs(Text, Words) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec index_pairs(text :: String.t, words :: [String.t]) :: [[integer]]\n  def index_pairs(text, words) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<List<int>> indexPairs(String text, List<String> words) {\n\n  }\n}"}],"testcase":"\"thestoryofleetcodeandme\"\n[\"story\",\"fleet\",\"leetcode\"]","testable":true,"templateMeta":{"name":"indexPairs","params":[{"name":"text","type":"string"},{"name":"words","type":"string[]"}],"return":{"type":"integer[][]"}}}