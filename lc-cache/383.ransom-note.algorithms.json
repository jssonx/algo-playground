{"id":383,"fid":383,"name":"Ransom Note","slug":"ransom-note","link":"https://leetcode.com/problems/ransom-note/description/","percent":57.93826346439157,"level":"Easy","category":"algorithms","companies":["apple"],"tags":["string"],"totalAC":"688.9K","totalSubmit":"1.2M","likes":3595,"dislikes":398,"desc":"<p>Given two strings <code>ransomNote</code> and <code>magazine</code>, return <code>true</code><em> if </em><code>ransomNote</code><em> can be constructed by using the letters from </em><code>magazine</code><em> and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>Each letter in <code>magazine</code> can only be used once in <code>ransomNote</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"a\", magazine = \"b\"\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"aa\", magazine = \"ab\"\n<strong>Output:</strong> false\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> ransomNote = \"aa\", magazine = \"aab\"\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>ransomNote</code> and <code>magazine</code> consist of lowercase English letters.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def canConstruct(self, ransomNote, magazine):\n        \"\"\"\n        :type ransomNote: str\n        :type magazine: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool canConstruct(char * ransomNote, char * magazine){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool CanConstruct(string ransomNote, string magazine) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} ransomNote\n * @param {string} magazine\n * @return {boolean}\n */\nvar canConstruct = function(ransomNote, magazine) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} ransom_note\n# @param {String} magazine\n# @return {Boolean}\ndef can_construct(ransom_note, magazine)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canConstruct(ransomNote string, magazine string) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def canConstruct(ransomNote: String, magazine: String): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun canConstruct(ransomNote: String, magazine: String): Boolean {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $ransomNote\n     * @param String $magazine\n     * @return Boolean\n     */\n    function canConstruct($ransomNote, $magazine) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function canConstruct(ransomNote: string, magazine: string): boolean {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (can-construct ransomNote magazine)\n  (-> string? string? boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec can_construct(RansomNote :: unicode:unicode_binary(), Magazine :: unicode:unicode_binary()) -> boolean().\ncan_construct(RansomNote, Magazine) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec can_construct(ransom_note :: String.t, magazine :: String.t) :: boolean\n  def can_construct(ransom_note, magazine) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool canConstruct(String ransomNote, String magazine) {\n\n  }\n}"}],"testcase":"\"a\"\n\"b\"","testable":true,"templateMeta":{"name":"canConstruct","params":[{"name":"ransomNote","type":"string"},{"name":"magazine","type":"string"}],"return":{"type":"boolean"}}}