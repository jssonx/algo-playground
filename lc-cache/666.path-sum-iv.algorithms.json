{"id":666,"fid":666,"name":"Path Sum IV","slug":"path-sum-iv","link":"https://leetcode.com/problems/path-sum-iv/description/","percent":59.39302312559494,"level":"Medium","category":"algorithms","tags":["tree"],"totalAC":"21.4K","totalSubmit":"36K","likes":319,"dislikes":411,"desc":"<p>If the depth of a tree is smaller than <code>5</code>, then this tree can be represented by an array of three-digit integers. For each integer in this array:</p>\n\n<ul>\n\t<li>The hundreds digit represents the depth <code>d</code> of this node where <code>1 &lt;= d &lt;= 4</code>.</li>\n\t<li>The tens digit represents the position <code>p</code> of this node in the level it belongs to where <code>1 &lt;= p &lt;= 8</code>. The position is the same as that in a full binary tree.</li>\n\t<li>The units digit represents the value <code>v</code> of this node where <code>0 &lt;= v &lt;= 9</code>.</li>\n</ul>\n\n<p>Given an array of <strong>ascending</strong> three-digit integers <code>nums</code> representing a binary tree with a depth smaller than <code>5</code>, return <em>the sum of all paths from the root towards the leaves</em>.</p>\n\n<p>It is <strong>guaranteed</strong> that the given array represents a valid connected binary tree.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/30/pathsum4-1-tree.jpg\" style=\"width: 212px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> nums = [113,215,221]\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> The tree that the list represents is shown.\nThe path sum is (3 + 5) + (3 + 1) = 12.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/30/pathsum4-2-tree.jpg\" style=\"width: 132px; height: 183px;\" />\n<pre>\n<strong>Input:</strong> nums = [113,221]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The tree that the list represents is shown. \nThe path sum is (3 + 1) = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 15</code></li>\n\t<li><code>110 &lt;= nums[i] &lt;= 489</code></li>\n\t<li><code>nums</code> represents a valid binary tree with depth less than <code>5</code>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int pathSum(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int pathSum(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def pathSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def pathSum(self, nums: List[int]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int pathSum(int* nums, int numsSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int PathSum(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar pathSum = function(nums) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef path_sum(nums)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func pathSum(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func pathSum(nums []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def pathSum(nums: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun pathSum(nums: IntArray): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn path_sum(nums: Vec<i32>) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function pathSum($nums) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function pathSum(nums: number[]): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (path-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec path_sum(Nums :: [integer()]) -> integer().\npath_sum(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec path_sum(nums :: [integer]) :: integer\n  def path_sum(nums) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int pathSum(List<int> nums) {\n\n  }\n}"}],"testcase":"[113,215,221]","testable":true,"templateMeta":{"name":"pathSum","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}