{"id":717,"fid":717,"name":"1-bit and 2-bit Characters","slug":"1-bit-and-2-bit-characters","link":"https://leetcode.com/problems/1-bit-and-2-bit-characters/description/","percent":45.82426495980469,"level":"Easy","category":"algorithms","tags":["array"],"totalAC":"115.4K","totalSubmit":"252.4K","likes":772,"dislikes":1915,"desc":"<p>We have two special characters:</p>\n\n<ul>\n\t<li>The first character can be represented by one bit <code>0</code>.</li>\n\t<li>The second character can be represented by two bits (<code>10</code> or <code>11</code>).</li>\n</ul>\n\n<p>Given a binary array <code>bits</code> that ends with <code>0</code>, return <code>true</code> if the last character must be a one-bit character.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> bits = [1,0,0]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> bits = [1,1,1,0]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bits.length &lt;= 1000</code></li>\n\t<li><code>bits[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isOneBitCharacter(vector<int>& bits) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isOneBitCharacter(int[] bits) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isOneBitCharacter(self, bits):\n        \"\"\"\n        :type bits: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool isOneBitCharacter(int* bits, int bitsSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsOneBitCharacter(int[] bits) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} bits\n * @return {boolean}\n */\nvar isOneBitCharacter = function(bits) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} bits\n# @return {Boolean}\ndef is_one_bit_character(bits)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isOneBitCharacter(_ bits: [Int]) -> Bool {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isOneBitCharacter(bits []int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isOneBitCharacter(bits: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isOneBitCharacter(bits: IntArray): Boolean {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn is_one_bit_character(bits: Vec<i32>) -> bool {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $bits\n     * @return Boolean\n     */\n    function isOneBitCharacter($bits) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function isOneBitCharacter(bits: number[]): boolean {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (is-one-bit-character bits)\n  (-> (listof exact-integer?) boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec is_one_bit_character(Bits :: [integer()]) -> boolean().\nis_one_bit_character(Bits) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec is_one_bit_character(bits :: [integer]) :: boolean\n  def is_one_bit_character(bits) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool isOneBitCharacter(List<int> bits) {\n\n  }\n}"}],"testcase":"[1,0,0]","testable":true,"templateMeta":{"name":"isOneBitCharacter","params":[{"name":"bits","type":"integer[]"}],"return":{"type":"boolean"}}}