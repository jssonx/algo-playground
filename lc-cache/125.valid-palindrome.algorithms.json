{"id":125,"fid":125,"name":"Valid Palindrome","slug":"valid-palindrome","link":"https://leetcode.com/problems/valid-palindrome/description/","percent":44.29399869492844,"level":"Easy","category":"algorithms","companies":["facebook","microsoft","uber","zenefits"],"tags":["two-pointers","string"],"totalAC":"1.9M","totalSubmit":"4.2M","likes":6460,"dislikes":6897,"desc":"<p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p>\n\n<p>Given a string <code>s</code>, return <code>true</code><em> if it is a <strong>palindrome</strong>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A man, a plan, a canal: Panama&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;amanaplanacanalpanama&quot; is a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;race a car&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;raceacar&quot; is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; &quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> s is an empty string &quot;&quot; after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of printable ASCII characters.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isPalindrome(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isPalindrome(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool isPalindrome(char * s){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsPalindrome(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Boolean}\ndef is_palindrome(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isPalindrome(_ s: String) -> Bool {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isPalindrome(s string) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isPalindrome(s: String): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isPalindrome(s: String): Boolean {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn is_palindrome(s: String) -> bool {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isPalindrome($s) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function isPalindrome(s: string): boolean {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (is-palindrome s)\n  (-> string? boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec is_palindrome(S :: unicode:unicode_binary()) -> boolean().\nis_palindrome(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec is_palindrome(s :: String.t) :: boolean\n  def is_palindrome(s) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool isPalindrome(String s) {\n\n  }\n}"}],"testcase":"\"A man, a plan, a canal: Panama\"","testable":true,"templateMeta":{"name":"isPalindrome","params":[{"name":"s","type":"string"}],"return":{"type":"boolean"}}}