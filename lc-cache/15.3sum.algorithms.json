{"id":15,"fid":15,"name":"3Sum","slug":"3sum","link":"https://leetcode.com/problems/3sum/description/","percent":32.42263976923572,"level":"Medium","category":"algorithms","companies":["adobe","amazon","bloomberg","facebook","microsoft"],"tags":["array","two-pointers"],"totalAC":"2.5M","totalSubmit":"7.7M","likes":23822,"dislikes":2171,"desc":"<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n<strong>Explanation:</strong> \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The only possible triplet does not sum up to 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> [[0,0,0]]\n<strong>Explanation:</strong> The only possible triplet sums up to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<IList<int>> ThreeSum(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func threeSum(nums []int) [][]int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun threeSum(nums: IntArray): List<List<Int>> {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function threeSum(nums: number[]): number[][] {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (three-sum nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec three_sum(Nums :: [integer()]) -> [[integer()]].\nthree_sum(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec three_sum(nums :: [integer]) :: [[integer]]\n  def three_sum(nums) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<List<int>> threeSum(List<int> nums) {\n\n  }\n}"}],"testcase":"[-1,0,1,2,-1,-4]","testable":true,"templateMeta":{"name":"threeSum","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"list<list<integer>>","colsize":3,"dealloc":true}}}