{"id":415,"fid":415,"name":"Add Strings","slug":"add-strings","link":"https://leetcode.com/problems/add-strings/description/","percent":52.52322934745467,"level":"Easy","category":"algorithms","companies":["airbnb","google"],"tags":["string"],"totalAC":"553.7K","totalSubmit":"1.1M","likes":4276,"dislikes":636,"desc":"<p>Given two non-negative integers, <code>num1</code> and <code>num2</code> represented as string, return <em>the sum of</em> <code>num1</code> <em>and</em> <code>num2</code> <em>as a string</em>.</p>\n\n<p>You must solve the problem without using any built-in library for handling large integers (such as <code>BigInteger</code>). You must also not convert the inputs to integers directly.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;11&quot;, num2 = &quot;123&quot;\n<strong>Output:</strong> &quot;134&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;456&quot;, num2 = &quot;77&quot;\n<strong>Output:</strong> &quot;533&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num1 = &quot;0&quot;, num2 = &quot;0&quot;\n<strong>Output:</strong> &quot;0&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>num1</code> and <code>num2</code> consist of only digits.</li>\n\t<li><code>num1</code> and <code>num2</code> don&#39;t have any leading zeros except for the zero itself.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string addStrings(string num1, string num2) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String addStrings(String num1, String num2) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        "},{"value":"c","text":"C","defaultCode":"char * addStrings(char * num1, char * num2){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string AddStrings(string num1, string num2) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar addStrings = function(num1, num2) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef add_strings(num1, num2)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func addStrings(_ num1: String, _ num2: String) -> String {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func addStrings(num1 string, num2 string) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def addStrings(num1: String, num2: String): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun addStrings(num1: String, num2: String): String {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn add_strings(num1: String, num2: String) -> String {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function addStrings($num1, $num2) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function addStrings(num1: string, num2: string): string {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (add-strings num1 num2)\n  (-> string? string? string?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec add_strings(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_strings(Num1, Num2) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec add_strings(num1 :: String.t, num2 :: String.t) :: String.t\n  def add_strings(num1, num2) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String addStrings(String num1, String num2) {\n\n  }\n}"}],"testcase":"\"11\"\n\"123\"","testable":true,"templateMeta":{"name":"addStrings","params":[{"name":"num1","type":"string"},{"name":"num2","type":"string"}],"return":{"type":"string"}}}