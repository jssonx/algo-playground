{"id":150,"fid":150,"name":"Evaluate Reverse Polish Notation","slug":"evaluate-reverse-polish-notation","link":"https://leetcode.com/problems/evaluate-reverse-polish-notation/description/","percent":45.28688993069921,"level":"Medium","category":"algorithms","companies":["linkedin"],"tags":["stack"],"totalAC":"614.1K","totalSubmit":"1.4M","likes":5402,"dislikes":845,"desc":"<p>You are given an array of strings <code>tokens</code> that represents an arithmetic expression in a <a href=\"http://en.wikipedia.org/wiki/Reverse_Polish_notation\" target=\"_blank\">Reverse Polish Notation</a>.</p>\n\n<p>Evaluate the expression. Return <em>an integer that represents the value of the expression</em>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>The valid operators are <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, and <code>&#39;/&#39;</code>.</li>\n\t<li>Each operand may be an integer or another expression.</li>\n\t<li>The division between two integers always <strong>truncates toward zero</strong>.</li>\n\t<li>There will not be any division by zero.</li>\n\t<li>The input represents a valid arithmetic expression in a reverse polish notation.</li>\n\t<li>The answer and all the intermediate calculations can be represented in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> ((2 + 1) * 3) = 9\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> (4 + (13 / 5)) = 6\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tokens[i]</code> is either an operator: <code>&quot;+&quot;</code>, <code>&quot;-&quot;</code>, <code>&quot;*&quot;</code>, or <code>&quot;/&quot;</code>, or an integer in the range <code>[-200, 200]</code>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int evalRPN(String[] tokens) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int evalRPN(char ** tokens, int tokensSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int EvalRPN(string[] tokens) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} tokens\n * @return {number}\n */\nvar evalRPN = function(tokens) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} tokens\n# @return {Integer}\ndef eval_rpn(tokens)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func evalRPN(_ tokens: [String]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func evalRPN(tokens []string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def evalRPN(tokens: Array[String]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun evalRPN(tokens: Array<String>): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn eval_rpn(tokens: Vec<String>) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $tokens\n     * @return Integer\n     */\n    function evalRPN($tokens) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function evalRPN(tokens: string[]): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (eval-rpn tokens)\n  (-> (listof string?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec eval_rpn(Tokens :: [unicode:unicode_binary()]) -> integer().\neval_rpn(Tokens) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec eval_rpn(tokens :: [String.t]) :: integer\n  def eval_rpn(tokens) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int evalRPN(List<String> tokens) {\n\n  }\n}"}],"testcase":"[\"2\",\"1\",\"+\",\"3\",\"*\"]","testable":true,"templateMeta":{"name":"evalRPN","params":[{"name":"tokens","type":"string[]"}],"return":{"type":"integer"}}}