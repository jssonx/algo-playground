{"id":422,"fid":422,"tags":["array"],"name":"Valid Word Square","slug":"valid-word-square","link":"https://leetcode.com/problems/valid-word-square/description/","percent":38.98122662149763,"level":"Easy","category":"algorithms","companies":["google"],"totalAC":"48.4K","totalSubmit":"121.6K","likes":373,"dislikes":233,"desc":"<p>Given an array of strings <code>words</code>, return <code>true</code> <em>if it forms a valid <strong>word square</strong></em>.</p>\n\n<p>A sequence of strings forms a valid <strong>word square</strong> if the <code>k<sup>th</sup></code> row and column read the same string, where <code>0 &lt;= k &lt; max(numRows, numColumns)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/validsq1-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;bnrt&quot;,&quot;crmy&quot;,&quot;dtye&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nThe 1<sup>st</sup> row and 1<sup>st</sup> column both read &quot;abcd&quot;.\nThe 2<sup>nd</sup> row and 2<sup>nd</sup> column both read &quot;bnrt&quot;.\nThe 3<sup>rd</sup> row and 3<sup>rd</sup> column both read &quot;crmy&quot;.\nThe 4<sup>th</sup> row and 4<sup>th</sup> column both read &quot;dtye&quot;.\nTherefore, it is a valid word square.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/validsq2-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> words = [&quot;abcd&quot;,&quot;bnrt&quot;,&quot;crm&quot;,&quot;dt&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nThe 1<sup>st</sup> row and 1<sup>st</sup> column both read &quot;abcd&quot;.\nThe 2<sup>nd</sup> row and 2<sup>nd</sup> column both read &quot;bnrt&quot;.\nThe 3<sup>rd</sup> row and 3<sup>rd</sup> column both read &quot;crm&quot;.\nThe 4<sup>th</sup> row and 4<sup>th</sup> column both read &quot;dt&quot;.\nTherefore, it is a valid word square.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/validsq3-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> words = [&quot;ball&quot;,&quot;area&quot;,&quot;read&quot;,&quot;lady&quot;]\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nThe 3<sup>rd</sup> row reads &quot;read&quot; while the 3<sup>rd</sup> column reads &quot;lead&quot;.\nTherefore, it is NOT a valid word square.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 500</code></li>\n\t<li><code>words[i]</code> consists of only lowercase English letters.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool validWordSquare(vector<string>& words) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean validWordSquare(List<String> words) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def validWordSquare(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def validWordSquare(self, words: List[str]) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool validWordSquare(char ** words, int wordsSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool ValidWordSquare(IList<string> words) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} words\n * @return {boolean}\n */\nvar validWordSquare = function(words) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words\n# @return {Boolean}\ndef valid_word_square(words)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func validWordSquare(_ words: [String]) -> Bool {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func validWordSquare(words []string) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def validWordSquare(words: List[String]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun validWordSquare(words: List<String>): Boolean {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn valid_word_square(words: Vec<String>) -> bool {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Boolean\n     */\n    function validWordSquare($words) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function validWordSquare(words: string[]): boolean {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (valid-word-square words)\n  (-> (listof string?) boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec valid_word_square(Words :: [unicode:unicode_binary()]) -> boolean().\nvalid_word_square(Words) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec valid_word_square(words :: [String.t]) :: boolean\n  def valid_word_square(words) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool validWordSquare(List<String> words) {\n\n  }\n}"}],"testcase":"[\"abcd\",\"bnrt\",\"crmy\",\"dtye\"]","testable":true,"templateMeta":{"name":"validWordSquare","params":[{"name":"words","type":"list<string>"}],"return":{"type":"boolean"}}}