{"id":219,"fid":219,"name":"Contains Duplicate II","slug":"contains-duplicate-ii","link":"https://leetcode.com/problems/contains-duplicate-ii/description/","percent":42.442361422857104,"level":"Easy","category":"algorithms","companies":["airbnb","palantir"],"tags":["array","hash-table"],"totalAC":"638.2K","totalSubmit":"1.5M","likes":4483,"dislikes":2507,"desc":"<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> <em>if there are two <strong>distinct indices</strong> </em><code>i</code><em> and </em><code>j</code><em> in the array such that </em><code>nums[i] == nums[j]</code><em> and </em><code>abs(i - j) &lt;= k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1], k = 3\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,1,1], k = 1\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1,2,3], k = 2\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool containsNearbyDuplicate(int* nums, int numsSize, int k){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool ContainsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function(nums, k) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef contains_nearby_duplicate(nums, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func containsNearbyDuplicate(_ nums: [Int], _ k: Int) -> Bool {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func containsNearbyDuplicate(nums []int, k int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def containsNearbyDuplicate(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun containsNearbyDuplicate(nums: IntArray, k: Int): Boolean {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn contains_nearby_duplicate(nums: Vec<i32>, k: i32) -> bool {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function containsNearbyDuplicate($nums, $k) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function containsNearbyDuplicate(nums: number[], k: number): boolean {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (contains-nearby-duplicate nums k)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec contains_nearby_duplicate(Nums :: [integer()], K :: integer()) -> boolean().\ncontains_nearby_duplicate(Nums, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec contains_nearby_duplicate(nums :: [integer], k :: integer) :: boolean\n  def contains_nearby_duplicate(nums, k) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool containsNearbyDuplicate(List<int> nums, int k) {\n\n  }\n}"}],"testcase":"[1,2,3,1]\n3","testable":true,"templateMeta":{"name":"containsNearbyDuplicate","params":[{"name":"nums","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"boolean"}}}