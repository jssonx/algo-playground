{"id":2121,"fid":1971,"name":"Find if Path Exists in Graph","tags": [
    "graph"
],"slug":"find-if-path-exists-in-graph","link":"https://leetcode.com/problems/find-if-path-exists-in-graph/description/","percent":52.11765312387228,"level":"Easy","category":"algorithms","totalAC":"226.2K","totalSubmit":"434.4K","likes":2815,"dislikes":145,"desc":"<p>There is a <strong>bi-directional</strong> graph with <code>n</code> vertices, where each vertex is labeled from <code>0</code> to <code>n - 1</code> (<strong>inclusive</strong>). The edges in the graph are represented as a 2D integer array <code>edges</code>, where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> denotes a bi-directional edge between vertex <code>u<sub>i</sub></code> and vertex <code>v<sub>i</sub></code>. Every vertex pair is connected by <strong>at most one</strong> edge, and no vertex has an edge to itself.</p>\n\n<p>You want to determine if there is a <strong>valid path</strong> that exists from vertex <code>source</code> to vertex <code>destination</code>.</p>\n\n<p>Given <code>edges</code> and the integers <code>n</code>, <code>source</code>, and <code>destination</code>, return <code>true</code><em> if there is a <strong>valid path</strong> from </em><code>source</code><em> to </em><code>destination</code><em>, or </em><code>false</code><em> otherwise</em><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/14/validpath-ex1.png\" style=\"width: 141px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There are two paths from vertex 0 to vertex 2:\n- 0 &rarr; 1 &rarr; 2\n- 0 &rarr; 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/14/validpath-ex2.png\" style=\"width: 281px; height: 141px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no path from vertex 0 to vertex 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li><code>0 &lt;= source, destination &lt;= n - 1</code></li>\n\t<li>There are no duplicate edges.</li>\n\t<li>There are no self edges.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean validPath(int n, int[][] edges, int source, int destination) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def validPath(self, n, edges, source, destination):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type source: int\n        :type destination: int\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool validPath(int n, int** edges, int edgesSize, int* edgesColSize, int source, int destination){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool ValidPath(int n, int[][] edges, int source, int destination) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} source\n * @param {number} destination\n * @return {boolean}\n */\nvar validPath = function(n, edges, source, destination) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer} source\n# @param {Integer} destination\n# @return {Boolean}\ndef valid_path(n, edges, source, destination)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func validPath(_ n: Int, _ edges: [[Int]], _ source: Int, _ destination: Int) -> Bool {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func validPath(n int, edges [][]int, source int, destination int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def validPath(n: Int, edges: Array[Array[Int]], source: Int, destination: Int): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun validPath(n: Int, edges: Array<IntArray>, source: Int, destination: Int): Boolean {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn valid_path(n: i32, edges: Vec<Vec<i32>>, source: i32, destination: i32) -> bool {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer $source\n     * @param Integer $destination\n     * @return Boolean\n     */\n    function validPath($n, $edges, $source, $destination) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function validPath(n: number, edges: number[][], source: number, destination: number): boolean {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (valid-path n edges source destination)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer? boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec valid_path(N :: integer(), Edges :: [[integer()]], Source :: integer(), Destination :: integer()) -> boolean().\nvalid_path(N, Edges, Source, Destination) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec valid_path(n :: integer, edges :: [[integer]], source :: integer, destination :: integer) :: boolean\n  def valid_path(n, edges, source, destination) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool validPath(int n, List<List<int>> edges, int source, int destination) {\n\n  }\n}"}],"testcase":"3\n[[0,1],[1,2],[2,0]]\n0\n2","testable":true,"templateMeta":{"name":"validPath","params":[{"name":"n","type":"integer"},{"type":"integer[][]","name":"edges"},{"type":"integer","name":"source"},{"type":"integer","name":"destination"}],"return":{"type":"boolean"}}}