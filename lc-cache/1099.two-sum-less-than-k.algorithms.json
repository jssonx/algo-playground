{"id":1083,"fid":1099,"name":"Two Sum Less Than K","slug":"two-sum-less-than-k","link":"https://leetcode.com/problems/two-sum-less-than-k/description/","percent":61.019313076251514,"level":"Easy","category":"algorithms","totalAC":"115.5K","totalSubmit":"189.2K","likes":1021,"dislikes":116,"desc":"<p>Given an array <code>nums</code> of integers and&nbsp;integer <code>k</code>, return the maximum <code>sum</code> such that there exists <code>i &lt; j</code> with <code>nums[i] + nums[j] = sum</code> and <code>sum &lt; k</code>. If no <code>i</code>, <code>j</code> exist satisfying this equation, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [34,23,1,24,75,33,54,8], k = 60\n<strong>Output:</strong> 58\n<strong>Explanation: </strong>We can use 34 and 24 to sum 58 which is less than 60.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,20,30], k = 15\n<strong>Output:</strong> -1\n<strong>Explanation: </strong>In this case it is not possible to get a pair sum less that 15.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= k &lt;= 2000</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int twoSumLessThanK(vector<int>& nums, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int twoSumLessThanK(int[] nums, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def twoSumLessThanK(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def twoSumLessThanK(self, nums: List[int], k: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int twoSumLessThanK(int* nums, int numsSize, int k){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int TwoSumLessThanK(int[] nums, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar twoSumLessThanK = function(nums, k) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef two_sum_less_than_k(nums, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func twoSumLessThanK(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func twoSumLessThanK(nums []int, k int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def twoSumLessThanK(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun twoSumLessThanK(nums: IntArray, k: Int): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn two_sum_less_than_k(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function twoSumLessThanK($nums, $k) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function twoSumLessThanK(nums: number[], k: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (two-sum-less-than-k nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec two_sum_less_than_k(Nums :: [integer()], K :: integer()) -> integer().\ntwo_sum_less_than_k(Nums, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec two_sum_less_than_k(nums :: [integer], k :: integer) :: integer\n  def two_sum_less_than_k(nums, k) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int twoSumLessThanK(List<int> nums, int k) {\n\n  }\n}"}],"testcase":"[34,23,1,24,75,33,54,8]\n60","testable":true,"templateMeta":{"name":"twoSumLessThanK","params":[{"name":"nums","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"integer"}}}