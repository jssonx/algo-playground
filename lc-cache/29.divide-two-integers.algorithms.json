{"id":29,"fid":29,"name":"Divide Two Integers","slug":"divide-two-integers","link":"https://leetcode.com/problems/divide-two-integers/description/","percent":17.162318426885783,"level":"Medium","category":"algorithms","tags":["math","binary-search"],"totalAC":"590.6K","totalSubmit":"3.4M","likes":4076,"dislikes":12955,"desc":"<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers <strong>without</strong> using multiplication, division, and mod operator.</p>\n\n<p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>8.345</code> would be truncated to <code>8</code>, and <code>-2.7335</code> would be truncated to <code>-2</code>.</p>\n\n<p>Return <em>the <strong>quotient</strong> after dividing </em><code>dividend</code><em> by </em><code>divisor</code>.</p>\n\n<p><strong>Note: </strong>Assume we are dealing with an environment that could only store integers within the <strong>32-bit</strong> signed integer range: <code>[&minus;2<sup>31</sup>, 2<sup>31</sup> &minus; 1]</code>. For this problem, if the quotient is <strong>strictly greater than</strong> <code>2<sup>31</sup> - 1</code>, then return <code>2<sup>31</sup> - 1</code>, and if the quotient is <strong>strictly less than</strong> <code>-2<sup>31</sup></code>, then return <code>-2<sup>31</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 10, divisor = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 10/3 = 3.33333.. which is truncated to 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 7, divisor = -3\n<strong>Output:</strong> -2\n<strong>Explanation:</strong> 7/-3 = -2.33333.. which is truncated to -2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= dividend, divisor &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>divisor != 0</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int divide(int dividend, int divisor) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int divide(int dividend, int divisor){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Divide(int dividend, int divisor) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} dividend\n# @param {Integer} divisor\n# @return {Integer}\ndef divide(dividend, divisor)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func divide(_ dividend: Int, _ divisor: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func divide(dividend int, divisor int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def divide(dividend: Int, divisor: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun divide(dividend: Int, divisor: Int): Int {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn divide(dividend: i32, divisor: i32) -> i32 {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $dividend\n     * @param Integer $divisor\n     * @return Integer\n     */\n    function divide($dividend, $divisor) {\n        \n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function divide(dividend: number, divisor: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (divide dividend divisor)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec divide(Dividend :: integer(), Divisor :: integer()) -> integer().\ndivide(Dividend, Divisor) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec divide(dividend :: integer, divisor :: integer) :: integer\n  def divide(dividend, divisor) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int divide(int dividend, int divisor) {\n\n  }\n}"}],"testcase":"10\n3","testable":true,"templateMeta":{"name":"divide","params":[{"name":"dividend","type":"integer"},{"name":"divisor","type":"integer"}],"return":{"type":"integer"}}}